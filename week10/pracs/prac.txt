

1. Calling conventions.
The X64 Assembly and ASCII Reference Sheet summarises the calling conventions recently
discussed in lectures. The following assembly code does not follow the calling conventions.
Some comments have been added to explain the intent of the code â€“ you should assume
that any inconsistency between the comments and the assembly is a mistake. Identify the
mistakes in the code and explain each mistake. Hint: You should be able to find at least
three distinct important mistakes. In fact, there are at least six distinct mistakes.

        func: # long func(long x, long y)
        pushq %rdx # Save rdx on the stack
        movq %rdi, %rdx # Save x to register rdx
        movq %rsi, %rbx # Save y to register rbx
        sarq %rdi # Compute x>>1 as parameter
        # Call doit with y as first parameter and x>>1 as
        # second parameter.
        call doit # rcx = doit(y, x>>1)
        andq %rdx, %rcx # rcx &= x
        addq %rbx, %rcx # rcx += y
        popq %rdx # Restore rdx from the stack
        ret # return rcx



            sub    $0x8,%rsp   ???
            .
            .
            .
            call doit       S  D???
            .
            .

            add    $0x8,%rsp   ???
            retq        ???


            func: 
                 pushq  %rbx
                 pushq  %rbp
                 subq .., %rsp


                 add



2. Consider the following disassembled C function compute:

        1. Dump of assembler code for function compute:
        2. 0x00400626 <+0>: mov %rdi,%rax
        3. 0x00400629 <+3>: test %rdi,%rdi
        4. 0x0040062c <+6>: jns 0x40063e <compute+24>
        5. 0x0040062e <+8>: sub $0x8,%rsp
        6. 0x00400632 <+12>: neg %rdi
        7. 0x00400635 <+15>: callq 0x400626 <compute>
        8. 0x0040063a <+20>: add $0x8,%rsp
        9. 0x0040063e <+24>: repz retq

a. Write pseudo-C corresponding to each line of the function. Note: Use brief English
descriptions for lines that have no C equivalent such as test of a register, and
manipulating the stack pointer.

    int foo(){

        rax = rdi  // inrt number = %rdi
        test rdi   // compare rdi against 0
        if (rdi < 0 ) {
            rdi *= -1;
            rax = compute(rdi)
        }
        return result;     
     }

      2. 0x00400626 <+0>: mov %rdi,%rax                   // int number = 1
        3. 0x00400629 <+3>: test %rdi,%rdi                  // if(number)
        4. 0x0040062c <+6>: jns 0x40063e <compute+24>       // else goto line 24
        5. 0x0040062e <+8>: sub $0x8,%rsp                   //leave stack to return 
        6. 0x00400632 <+12>: neg %rdi                       // int number = -1 * number 
        7. 0x00400635 <+15>: callq 0x400626 <compute>       // line 24 starts
        8. 0x0040063a <+20>: add $0x8,%rsp    





3. Consider the following snippet of C code.
long process (char *cp, short *sp, long *lp, long j) {
...
}


Each of the following assembly addressing expressions is found inside the implementation of
the function process. Interpret each expression as a C array reference. Use the
appropriate parameter pointer name in your C expression. For example, 3(%rdi) is
equivalent to the C array expression cp[3].
The last three examples are unusual and more difficult.
        
        rdi = cp //first parameter
        rsi = sp // second
        rdx = lp // third
        rcx = j  //fourth


        a. 8(%rdi)         = cp[8]
        b. 0x13(%rdi)      = cp[16 + 3 = 19] 
        c. (%rdi)          = cp[0] = *cp
        d. 8(%rsi)         = sp[4] // short = 2B
        e. 8(%rdx)         = lp[1]
        f. (%rdi,%rcx)     = cp + j
                          //cp stores chars (1B)
                          = cp[j]

        g. (%rsi,%rcx,2)  = 
        h. 3(%rdi,%rcx)   = cp + j + 3
                          = cp[j + 3]
        i. 8(%rdx,%rcx,8) = lp + (j * 8) + 8
                          = lp[j+1]
        j. (%rdi,%rcx,4)    



3. check https://godbolt.org/ compiler exploerer